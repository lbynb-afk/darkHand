一些技术性名词解释：

1，动态链接库（Dynamic Link Library，简称 DLL）：

是一种在Windows操作系统中常见的共享库形式，它允许多个程序同时使用该库中的代码和数据。 DLL文件通常包含在Windows操作系统或应用程序的安装包中，以便在运行时加载和使用其中的函数和资源。

与静态链接库（Static Link Library，简称 LIB）不同，动态链接库的代码和数据并不在编译时被复制到应用程序中，而是在运行时由操作系统动态加载。这意味着多个应用程序可以同时共享同一个DLL文件，从而减小程序的内存占用和磁盘空间占用。

使用DLL文件可以使应用程序更加模块化，便于维护和升级。当需要更新库中的代码或修复其中的错误时，只需要更新DLL文件本身，而不必重新编译所有的应用程序。同时，DLL文件中的代码可以通过操作系统的内存管理机制进行优化和保护，从而提高程序的安全性和稳定性。


2，C++中.h文件和.cpp文件有啥区别和联系

在 C++ 中，.h 文件通常包含函数和变量的声明，而 .cpp 文件包含实际的函数和变量的定义和实现。

.h 文件通常用于提供函数和变量的声明，以便其他文件（如 .cpp 文件）可以使用它们而不需要知道实现的细节。 .h 文件中通常只包含类、结构体、函数和变量的声明，而不包含实际的代码。

.cpp 文件包含实际的函数和变量的定义和实现。在这些文件中，可以包括实际的代码来实现类、结构体、函数和变量。这些文件通常包含 #include 指令，以便包含必要的 .h 文件。

因此，.h 文件和 .cpp 文件一起工作，使得代码可以被组织和重用。通过将声明和实现分离，可以减少代码的复制，提高代码的可读性和维护性。


3，集成开发环境和编译器的区别

编译器是一整套工具，它负责将高级编程语言编写成的源码程序编译成计算机识别并可运行的二进制文件，跟写代码用的工具没有任何关系。比如 gcc，它就是编译器。

集成开发环境也就是 IDE，IDE是提供程序开发环境的应用程序，一般包括了代码编辑器、编译器、调试器和图形用户界面工具，它基本上涵盖了软件代码编写需要的所有工具。比如 visual studio、CLion 就是 IDE，在 IDE 中一般都可以自己选择所要使用的编译器。


4，C++里的宏是干嘛的？

C++中的宏（Macro）是一种预处理指令，它允许在编译时通过替换文本来扩展代码。它们可以用来定义常量、简化代码、实现条件编译和创建通用代码。

以下是一些常见的宏用途：

定义常量：通过宏定义常量，可以在代码中使用易于记忆的名称来代替常量值。例如：#define PI 3.1415926

简化代码：通过宏定义，可以将一些常见的代码块封装为简单的宏，从而简化代码。例如：#define PRINT(x) std::cout << x << std::endl;这个宏可以用来打印任何变量，从而简化了代码。

实现条件编译：通过宏定义，可以在不同的平台上编写不同的代码。

创建通用代码：通过宏定义，可以在编写通用代码时使用参数化的宏。例如：#define MAX(x,y) ((x) > (y) ? (x) : (y))，这个宏可以用来计算两个值中的最大值，可以用于不同类型的变量。

需要注意的是，宏定义并不是函数或变量，而是在编译时被预处理器处理的文本替换。因此，在使用宏时需要注意可能带来的副作用，例如宏定义中的参数可能会被多次求值，导致错误的结果。


5，为什么要有Linux 操作系统？

Linux操作系统有其自身的优势和应用场景。以下是一些常见的原因：

开源：Linux是一个开源系统，可以自由获取、使用和修改。这意味着用户可以根据自己的需要进行修改和定制，从而满足特定的需求。

稳定性：Linux在服务器领域拥有很高的市场份额，这主要是由于其稳定性和可靠性。Linux能够在长时间运行中保持高效和稳定，这对于一些重要的任务和应用非常重要。

安全性：Linux拥有很高的安全性，因为它是开源的，所以可以更容易地发现和解决潜在的漏洞。此外，Linux的权限管理系统也比Windows更加灵活和安全。

可定制性：Linux可以根据需要进行定制，用户可以根据自己的需求选择不同的桌面环境、软件包和配置文件，从而创建一个完全符合自己需要的操作系统。

免费和低成本：Linux操作系统是免费的，用户不需要支付任何许可费用或版权费用。此外，Linux操作系统的硬件要求也较低，可以在旧的计算机上使用，从而降低了硬件成本。

总的来说，Linux操作系统可以用于各种不同的场景，从嵌入式设备到服务器和超级计算机。对于那些需要高度可靠、高度定制和高度安全的应用来说，Linux是一个很好的选择。


6，cmake是什么鬼东西？

CMake是一个开源的跨平台构建工具，它可以帮助开发者自动化构建、测试和打包软件。它可以用于编译C++、C、Fortran等编程语言的项目，支持 Windows、Linux、MacOS等多种操作系统。

使用CMake，开发者可以定义一个名为CMakeLists.txt的文件，该文件指定了构建项目所需的所有依赖项、源代码、编译器选项、目标文件等信息。然后，CMake会根据CMakeLists.txt文件自动生成适用于不同平台和编译器的构建系统（如Makefile、Visual Studio项目、Xcode项目等），从而使得开发者能够更加方便地管理和构建项目。

相比于手动编写Makefile或者其他构建脚本，使用CMake能够更加简化和自动化构建流程，同时也提高了跨平台性和可移植性，因为CMake会根据不同的平台和编译器生成相应的构建系统。


7，xml和json是什么？有什么区别？

XML（可扩展标记语言）和JSON（JavaScript对象表示法）是两种常用于在应用程序之间传递数据的格式。

XML是一种标记语言，用于描述和传输数据，可以用于在Web上发布和交换结构化数据。 XML具有丰富的元素和属性来表示数据，包括命名空间、实体引用和注释等功能，可以方便地创建具有层次结构的文档。 XML的缺点是它的语法比较冗长，需要更多的字节来描述相同的信息，因此在传输大量数据时可能会占用更多的带宽。

JSON是一种轻量级的数据交换格式，常用于Web应用程序和移动应用程序中。 JSON基于JavaScript语言，但它是独立于语言的。 JSON使用键值对来表示数据，包括对象和数组，比XML更加简洁和紧凑，因此在传输大量数据时会占用更少的带宽。

下面是XML和JSON的一些区别：

语法：XML使用标记来表示数据，而JSON使用键值对来表示数据。

可读性：XML具有良好的可读性和易于理解的层次结构，而JSON则更加简洁和紧凑。

体积：XML比JSON更大，因为XML需要使用标记来表示数据，而JSON只需要使用键值对。

数据类型：XML具有多种数据类型，包括字符串、数字、布尔值、日期和时间等，而JSON只有字符串、数字、布尔值和null。

应用场景：XML通常用于传输较大的数据和具有复杂结构的数据，而JSON则更适合于传输小型数据和数据结构简单的数据。


8，什么是值传递？

在计算机编程中，值传递是一种参数传递方式，其中被传递的参数的值被复制到函数的参数中，而不是传递参数本身。

在值传递中，函数可以使用复制的值来执行操作，但无法更改原始参数的值。函数形参发生任何的改变都不会影响实参。

这与引用传递不同，后者允许函数更改传递的参数的值。值传递通常用于传递基本数据类型，例如整数、浮点数和布尔值。


9，指针是什么？

指针就是地址。值传递不会改变实参，地址传递会改变实参。引用就是给内存的原名起别名。 

引用的本质是一个指针常量，它指向所引用的变量的地址，并且不能被重新绑定到其他变量。这意味着，一旦引用被初始化，它将始终指向同一个变量，并且不能被用于访问其他变量。


10，docker是干嘛用的？

Docker是一种容器化技术，它可以将应用程序及其依赖项打包成一个可移植的容器，以便在不同的环境中进行部署和运行。使用Docker可以极大地简化应用程序的部署和管理，提高开发和运维效率。Docker的优点包括：

1. 可移植性：Docker容器可以在不同的操作系统和平台上运行，保证应用程序的可移植性。

2. 隔离性：Docker容器可以隔离应用程序及其依赖项，避免应用程序之间的冲突和干扰。

3. 快速部署：Docker容器可以在几秒钟内启动，大大缩短了应用程序的部署时间。

4. 简化管理：Docker提供了一套完整的管理工具，包括镜像仓库、容器编排等，可以极大地简化应用程序的管理和维护。

总之，Docker是一种非常强大的容器化技术，可以帮助开发人员和运维人员更加轻松地管理和部署应用程序。


11，